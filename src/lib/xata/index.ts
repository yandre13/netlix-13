// Generated by Xata Codegen 0.23.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "username", type: "string" },
      { name: "picture", type: "string" },
      { name: "created_at", type: "datetime", defaultValue: "now" },
      { name: "updated_at", type: "datetime", defaultValue: "now" },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "REPLACE_THIS_TEXT",
      },
    ],
  },
  {
    name: "movies",
    columns: [
      { name: "title", type: "string" },
      { name: "description", type: "text" },
      { name: "poster_url", type: "string" },
      { name: "release_date", type: "string" },
      { name: "rating", type: "float" },
      { name: "trailer_url", type: "string" },
      { name: "reviews", type: "link", link: { table: "reviews" } },
      { name: "created_at", type: "datetime", defaultValue: "now" },
      { name: "updated_at", type: "datetime", defaultValue: "now" },
      { name: "genres", type: "multiple" },
      { name: "actors", type: "multiple" },
      { name: "directors", type: "multiple" },
      { name: "writers", type: "multiple" },
    ],
  },
  {
    name: "reviews",
    columns: [
      { name: "author", type: "link", link: { table: "users" } },
      { name: "movie", type: "link", link: { table: "movies" } },
      { name: "rating", type: "int" },
      { name: "content", type: "text" },
      { name: "created_at", type: "datetime", defaultValue: "now" },
      { name: "updated_at", type: "datetime", defaultValue: "now" },
    ],
  },
  {
    name: "profiles",
    columns: [
      { name: "created_at", type: "datetime", defaultValue: "now" },
      { name: "updated_at", type: "datetime", defaultValue: "now" },
      { name: "user", type: "link", link: { table: "users" } },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "REPLACE_THIS_TEXT",
      },
      {
        name: "picture",
        type: "string",
        notNull: true,
        defaultValue: "REPLACE_THIS_TEXT",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Movies = InferredTypes["movies"];
export type MoviesRecord = Movies & XataRecord;

export type Reviews = InferredTypes["reviews"];
export type ReviewsRecord = Reviews & XataRecord;

export type Profiles = InferredTypes["profiles"];
export type ProfilesRecord = Profiles & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  movies: MoviesRecord;
  reviews: ReviewsRecord;
  profiles: ProfilesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Yaser-Andre-s-workspace-hre58l.us-east-1.xata.sh/db/netlix",
  branch: "dev",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      { ...defaultOptions, ...options, apiKey: process.env.XATA_API_KEY },
      tables
    )
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
